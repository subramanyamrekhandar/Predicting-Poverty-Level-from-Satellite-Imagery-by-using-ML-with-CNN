# -*- coding: utf-8 -*-
"""Land_cover_classification_of_satellite_imagery_using_Convolutional_Neural_Networks.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FJRDq-qJvjCAICJ17H3LsTt6X2_-GN12

<a href="https://colab.research.google.com/github/syamkakarla98/Hyperspectral_Image_Analysis_Simplified/blob/master/1D_CNN/Land_cover_classification_of_satellite_imagery_using_Convolutional_Neural_Networks.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

#<font color = 'tomato'>Land cover classification of satellite imagery using Convolutional Neural Networks</font>

## Download Data
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive

# !wget http://www.ehu.eus/ccwintco/uploads/a/a3/Salinas_corrected.mat http://www.ehu.eus/ccwintco/uploads/f/fa/Salinas_gt.mat

"""## Import Libraries"""

!pip install earthpy

import matplotlib.pyplot as plt

import numpy as np
import earthpy.plot as ep
import seaborn as sns
import earthpy.spatial as es

import plotly.graph_objects as go
import plotly.express as px

from scipy.io import loadmat

import pandas as pd

from sklearn.preprocessing import minmax_scale
from sklearn.model_selection import train_test_split
from sklearn.metrics import (accuracy_score,
                             confusion_matrix, classification_report)

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.layers import Input, Dense, Conv1D, MaxPooling1D, Dropout, Flatten
from tensorflow.keras.models import Sequential
from tensorflow.keras.utils import to_categorical

from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, TensorBoard

from tqdm import tqdm
from numpy.random import seed
from time import time

seed(11)

"""## Load Data"""

data = loadmat('/content/sample_data/Salinas_corrected.mat')['salinas_corrected']

gt = loadmat('/content/sample_data/Salinas_gt.mat')['salinas_gt']

print(f'Data Shape: {data.shape[:-1]}\nNumber of Bands: {data.shape[-1]}')

df = pd.DataFrame(data.reshape(data.shape[0]*data.shape[1], -1))

df.columns = [f'band{i}' for i in range(1, df.shape[-1]+1)]

df['class'] = gt.ravel()

df.head()

"""### Description of Classes

|Label |Class	|Samples|
|------|------|-------|
1|	Brocoli_green_weeds_1	|2009
2|	Brocoli_green_weeds_2	|3726
3|	Fallow	|1976
4	|Fallow_rough_plow|	1394
5	|Fallow_smooth	|2678
6|	Stubble	|3959
7	|Celery	|3579
8	|Grapes_untrained	|11271
9	|Soil_vinyard_develop|	6203
10|	Corn_senesced_green_weeds|	3278
11|	Lettuce_romaine_4wk	|1068
12|	Lettuce_romaine_5wk	|1927
13|	Lettuce_romaine_6wk	|916
14|	Lettuce_romaine_7wk	|1070
15|	Vinyard_untrained|	7268
16|	Vinyard_vertical_trellis|	1807

## Data Visualization
"""

fig = plt.figure(figsize = (20, 12))

ax = fig.subplots(2, 5)

for i in range(2):
  for j in range(5):
    c = np.random.randint(103)
    ax[i][j].imshow(data[:, :, c], cmap='nipy_spectral')
    ax[i][j].axis('off')
    ax[i][j].title.set_text(f"Band - {c}")
    c+=1

plt.tight_layout()
plt.show()

"""## RGB Composite Image"""

mdata = np.moveaxis(data, -1, 0)

ep.plot_rgb(mdata, (29, 19, 9), figsize=(15, 15))

plt.show()

"""## GroundTruth Visualizaation"""

def plot_data(data):
  fig = plt.figure(figsize=(12, 10))
  plt.imshow(data, cmap='nipy_spectral')
  plt.colorbar()
  plt.axis('off')
  plt.show()

plot_data(gt)